name: Nightly CI

on:
  workflow_dispatch:

  push:
    branches:
      - master

  pull_request:
    branches:
      - master


concurrency:
  # Don't run workflow in parallel
  group: ${{ github.workflow }}

env:
  TEST_TAG: mentalsmash/uno:test
  NIGHTLY_TAG: mentalsmash/uno:nightly
  NIGHTLY_STATIC_TAG: mentalsmash/uno:nightly-static

jobs:
  build_and_test:
    strategy:
      matrix:
        base-image: ["ubuntu:22.04", "ubuntu:latest"] #, "debian:stable"]
        uno-middleware: [uno.middleware.native, uno_middleware_connext]
        exclude:
          - base-image: ubuntu:latest
            uno-middleware: uno_middleware_connext
          # - base-image: debian:stable
          #   uno-middleware: uno_middleware_connext
    runs-on: ubuntu-latest
    steps:
      # Check out main repository
      - name: Clone uno
        uses: actions/checkout@v4
        with:
          path: src/uno
      # Clone CI configuration repository
      - name: Clone CI configuration
        uses: actions/checkout@v4
        with:
          repository: mentalsmash/uno-ci
          token: ${{ secrets.UNO_CI_PAT }}
          ref: master
          path: src/uno-ci
      # Build tester docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build local test image
        uses: docker/build-push-action@v5
        with:
          file: src/uno/docker/Dockerfile
          tags: ${{ env.TEST_TAG }}
          load: true
          context: src/uno
          build-args: |
            TEST=y
            BASE_IMAGE=${{ matrix.base-image }}
            UNO_MIDDLEWARE=${{ matrix.uno-middleware }}
      # Install uno in a venv
      - name: Generate virtual environment
        run: |
          python3 -m venv venv
          . venv/bin/activate
          pip install -e src/uno
          pip install pytest
      # Install middleware
      - name: Clone uno-middleware-connext
        uses: actions/checkout@v4
        with:
          repository: mentalsmash/uno-middleware-connext
          path: src/plugins/uno-middleware-connext
        if: matrix.uno-middleware == 'uno_middleware_connext'
      - name: Install uno-middleware-connext
        run: |
          . venv/bin/activate
          pip install -e src/plugins/uno-middleware-connext
        if: matrix.uno-middleware == 'uno_middleware_connext'
      - name: Configure uno-middleware-connext
        run: |
          echo "RTI_LICENSE_FILE=${GITHUB_WORKSPACE}/src/uno-ci/resource/rti/rti_license.dat" >> ${GITHUB_ENV}
        if: matrix.uno-middleware == 'uno_middleware_connext'
      # Run tests with the selected middleware
      - name: Run unit tests
        run: |
          . venv/bin/activate
          cd src/uno
          # TODO(asorbini) run tests inside a container
          pytest -s -k "not test_integration" -v --junit-xml=${GITHUB_WORKSPACE}/test/pytest-results-unit.xml
        env:
          UNO_MIDDLEWARE: ${{ matrix.uno-middleware }}
          VERBOSITY: activity
          DEBUG: y
      # - name: Upload unit test results
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: pytest-results-unit-${{ matrix.uno-middleware }}-${{ matrix.base-image }}
      #     path: test/pytest-results-*
      #   # Use always() to always run this step to publish test results when there are test failures
      #   if: ${{ always() }}
      - name: Run integration tests
        run: |
          . venv/bin/activate
          cd src/uno
          pytest -s -k test_integration -v --junit-xml=${GITHUB_WORKSPACE}/test/pytest-results-integration.xml
        env:
          UNO_MIDDLEWARE: ${{ matrix.uno-middleware }}
          VERBOSITY: activity
          DEBUG: y
      # - name: Upload integration test results
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: pytest-results-int-${{ matrix.uno-middleware }}-${{ matrix.base-image }}
      #     path: test/pytest-results-int-${{ matrix.uno-middleware }}.xml
      #   # Use always() to always run this step to publish test results when there are test failures
      #   if: ${{ always() }}

  docker_images:
    if: github.ref_name	== 'master'
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      # Check out main repository
      - name: Clone uno
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push full image
        uses: docker/build-push-action@v5
        with:
          file: docker/Dockerfile
          tags: ${{ env.NIGHTLY_TAG }}
          push: true
          context: src/uno
          build-args: |
            UNO_MIDDLEWARE=uno_middleware_connext
            BASE_IMAGE=ubuntu:22.04
      - name: Build and push static image
        uses: docker/build-push-action@v5
        with:
          file: docker/Dockerfile
          tags: ${{ env.NIGHTLY_STATIC_TAG }}
          push: true
          context: src/uno
          build-args: |
            UNO_MIDDLEWARE=uno.middleware.native
            BASE_IMAGE=ubuntu:latest

  