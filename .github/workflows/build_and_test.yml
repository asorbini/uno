name: Build and test

on:
  workflow_call:
    inputs:
      uno-middleware:
        type: string
        required: true
      base-image:
        type: string
        required: true
      build-platform:
        type: string
        required: true
      run-unit:
        type: boolean
        default: true
      run-integration:
        type: boolean
        default: true

concurrency:
  group: test-build-${{ github.ref }}-${{ inputs.uno-middleware }}-${{ inputs.build-platform }}-${{ inputs.base-image }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-n-test:
    runs-on: ubuntu-latest
    steps:
      - name: Generate build and test configuration
        id: config
        run: |
          case "${{ inputs.uno-middleware }}" in
            uno.middleware.native)
              middleware_type=static
              ;;
            *)
              middleware_type=default
              ;;
          esac
          middleware_label=$(echo ${{inputs.uno-middleware}} | sed -r 's/uno.middleware.//')
          base_image=$(echo ${{inputs.base-image}} | tr : -)
          image_version=${{github.ref_name}}
          case "${{github.ref_type}}" in
            tag)
              ;;
            *)
              sha_short=$(git rev-parse --short HEAD)
              image_version=${{github.ref_name}}@${sha_short}
              ;;
          esac
          test_date=$(date +%Y%m%d-%H%M%S)
          echo TEST_ARTIFACT=uno-${middleware_label}-${image_label}__${{ inputs.build-platform }}-${base_image}__${test_date} >> ${GITHUB_OUTPUT}
          echo TEST_IMAGE=${{ github.repository }}-test:latest >> ${GITHUB_OUTPUT}

      - name: Clone build support files
        uses: actions/checkout@v4
        with:
          repository: mentalsmash/uno-ci
          token: ${{ secrets.UNO_CI_PAT }}
          ref: master
          path: src/uno-ci
        if: inputs.uno-middleware == 'uno_middleware_connext'

      - name: Clone ARM support files
        uses: actions/checkout@v4
        with:
          repository: mentalsmash/uno-ci-arm
          token: ${{ secrets.UNO_CI_ARM_PAT }}
          ref: master
          path: src/uno-ci-arm
        if: inputs.build-platform == 'arm64' && inputs.uno-middleware == 'uno_middleware_connext'
      
      # Clone uno's main repository
      - name: Clone uno
        uses: actions/checkout@v4
        with:
          path: src/uno

      # Build tester docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Configure build environment
        run: |
          case '${{ inputs.uno-middleware }}' in
            uno_middleware_connext)
              cp src/uno-ci/resource/rti/rti_license.dat rti_license.dat
              case '${{ inputs.build-platform }}' in
                arm64)
                  cp src/uno-ci-arm/resource/rti/rti.connext-7.1.0-cp310-cp310-linux_aarch64.whl \
                     src/uno
                  ;;
              esac
              ;;
          esac

      - name: Build tester image
        uses: docker/build-push-action@v5
        with:
          file: src/uno/docker/Dockerfile
          tags: ${{ steps.config.outputs.TEST_IMAGE }}
          push: true
          context: src/uno
          platforms: linux/${{ inputs.build-platform }}
          build-args: |
            TEST=y
            BASE_IMAGE=${{ inputs.base-image }}
            UNO_MIDDLEWARE=${{ inputs.uno-middleware }}

      - name: Run unit tests
        if: inputs.run-unit
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            -w /workspace/src/uno \
            -e RTI_LICENSE_FILE=/workspace/rti_license.dat \
            -e VERBOSITY=activity \
            -e DEBUG=y \
            ${{ steps.config.outputs.TEST_IMAGE }} \
            pytest -s -v --junit-xml=/workspace/test/tests-unit.xml \
              test/unit

      - name: Run integration tests
        if: inputs.run-integration
        run: |
          python3 -m venv venv
          . venv/bin/activate
          pip3 install src/uno
          pip3 install src/uno/plugins/${{ inputs.uno-middleware }}
          cd src/uno
          pytest -s -v \
            --junit-xml=test/tests-integration.xml \
            test/integration
        env:
          RTI_LICENSE_FILE: ${{ github.workspace }}/rti_license.dat

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.config.outputs.TEST_ARTIFACT }}
          path: test/tests-*.xml
        if: ${{ always() }}

