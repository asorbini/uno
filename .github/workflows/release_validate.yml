name: Test Released Images
run-name: Test ${{github.ref_type == 'branch' && 'nightly' || 'release'}} from ${{github.ref_type}} ${{github.ref_name}}${{github.ref_type == 'branch' && ' @ ' || ''}}${{github.ref_type == 'branch' && github.sha || ''}}

on:
  workflow_dispatch:

  workflow_call:

  workflow_run:
    workflows: ["Release"]
    types: [completed]

concurrency:
  group: release-validate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-trigger:
    if: github.event_name == 'workflow_run'
    runs-on: ubuntu-latest
    outputs:
      DO_VALIDATE: ${{steps.run-config.outputs.DO_VALIDATE}}
    steps:
      - name: "Ignore non-release upstream jobs"
        id: run-config
        run: |
          DO_VALIDATE=y
          case ${{github.ref_type}} in
            tag)
              ;;
            branch)
              case ${{github.ref_name}} in
                master)
                  ;;
                *)
                  DO_VALIDATE=
                  ;;
              esac
              ;;
          esac
          echo DO_VALIDATE=${DO_VALIDATE} >> ${GITHUB_OUTPUT}
      - name: "Fail if upstream job failed"
        run: |
          echo "upstream job for ${{github.ref_type}} ${{github.ref_name}} failed with conclusion '${{github.event.workflow_run.conclusion}}'"
          exit 1
        if: steps.run-config.outputs.DO_VALIDATE && github.event.workflow_run.conclusion != 'success'

  test:
    needs: check-trigger
    if: needs.check-trigger.outputs.DO_VALIDATE
    runs-on: ubuntu-latest
    outputs:
      TEST_ID: ${{ steps.config.outputs.TEST_ID }}
      BUILD_TYPE: ${{ steps.config.outputs.BUILD_TYPE }}
    strategy:
      matrix:
        include:
          - build-platform: amd64
            uno-middleware: uno.middleware.native
            base-image: ubuntu:24.04
            tag-suffix: '-static'
          - build-platform: amd64
            uno-middleware: uno_middleware_connext
            base-image: ubuntu:22.04
            tag-suffix: ''
          # - build-platform: arm64
          #   uno-middleware: uno.middleware.native
          #   base-image: ubuntu:24.04
          #   tag-suffix: '-static'
          # - build-platform: arm64
          #   uno-middleware: uno_middleware_connext
          #   base-image: ubuntu:22.04
          #   tag-suffix: ''

    steps:
      - name: Clone uno
        uses: actions/checkout@v4
        with:
          path: src/uno
          submodules: true

      - name: Clone support files
        uses: actions/checkout@v4
        with:
          repository: mentalsmash/uno-ci
          token: ${{ secrets.UNO_CI_PAT }}
          ref: master
          path: src/uno-ci

      - name: Configure tester build
        id: config
        run: |
          cp src/uno-ci/resource/rti/rti_license.dat rti_license.dat
          case "${{github.ref_type}}" in
            branch)
              build_type=nightly
              image_tag=nightly${{ matrix.tag-suffix }}
              sha_short=$(git rev-parse --short HEAD)
              image_label=${image_tag}@${sha_short}
              ;;
            tag)
              build_type=release
              image_tag=latest${{ matrix.tag-suffix }}
              image_label=${image_tag}@${{github.ref_name}}
              ;;
          esac
          test_id=$(date +%Y%m%d-%H%M%S)
          echo IMAGE_TAG=${image_tag} >> ${GITHUB_OUTPUT}
          echo TEST_IMAGE=${{ github.repository }}-test:latest >> ${GITHUB_OUTPUT}
          echo TEST_ARTIFACT=uno-test-${image_label}-${{ matrix.build-platform }}__${test_id} >> ${GITHUB_OUTPUT}
          echo TEST_ID=${test_id}
          echo BUILD_TYPE=${build_type}

          # Create test results directory
          mkdir -p test-results


      - name: Build tester image
        uses: docker/build-push-action@v5
        with:
          file: src/uno/docker/test/Dockerfile
          tags: ${{ steps.config.outputs.TEST_IMAGE }}
          load: true
          context: src/uno
          platforms: linux/${{ matrix.build-platform }}
          build-args: |
            BASE_IMAGE=${{ github.repository }}:${{ steps.config.outputs.IMAGE_TAG }}
    
      - name: Run unit tests
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            -w /workspace \
            -e RTI_LICENSE_FILE=/workspace/rti_license.dat \
            -e LOG_LEVEL=activity \
            -e DEBUG=y \
            ${{ steps.config.outputs.TEST_IMAGE }} \
            pytest -s -v --junit-xml=test-results/uno-test-results-unit-${{ steps.config.outputs.TEST_ID }}.xml \
              src/uno/test/unit

      - name: Restore permissions changed by unit tests
        if: ${{ always() }}
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            ${{ steps.config.outputs.TEST_IMAGE }} \
            fix-root-permissions $(id -u):$(id -g) /workspace

      - name: Setup integration tests
        run: |
          python3 -m venv venv
          . venv/bin/activate
          pip3 install -U pip setuptools
          pip3 install -U -e src/uno
          case '${{ matrix.uno-middleware }}' in
            uno.middleware.native)
              ;;
            *)
              pip3 install -U -e src/uno/plugins/${{ matrix.uno-middleware }}
              ;;
          esac

      - name: Run integration tests
        id: integration-tests
        run: |
          . venv/bin/activate
          pytest -s -v --junit-xml=test-results/uno-test-results-integration-${{ steps.config.outputs.TEST_ID }}.xml \
            src/uno/test/integration
        env:
          RTI_LICENSE_FILE: ${{ github.workspace }}/rti_license.dat
          DEBUG: y
          LOG_LEVEL: activity
          UNO_MIDDLEWARE: ${{ matrix.uno-middleware }}

      - name: Restore permissions changed by integration tests
        if: ${{ always() }}
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            ${{ steps.config.outputs.TEST_IMAGE }} \
            fix-root-permissions $(id -u):$(id -g) /workspace

      # Always collect and upload available test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.config.outputs.TEST_ARTIFACT }}
          path: test-results/*
        if: ${{ always() }}
