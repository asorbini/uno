#!/bin/sh
###############################################################################
# (C) Copyright 2020 Andrea Sorbini
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as 
# published by the Free Software Foundation, either version 3 of the 
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
###############################################################################
set -e
[ -z "${DEBUG}" ] || set -x

################################################################################
# Logging helpers
################################################################################
uno_error()
{
    printf "${COLOR_RED_BOLD}"
    echo ERROR: $@ >&2
    printf "${COLOR_RESET}"
    printf "${_log_color}"
    exit 1
}

uno_warning()
{
    printf "${COLOR_YELLOW_BOLD}"
    echo WARNING: $@ >&2
    printf "${COLOR_RESET}"
    printf "${_log_color}"
}

uno_info()
{
    printf "${COLOR_BLUE_BOLD}"
    echo I: $@
    printf "${COLOR_RESET}"
    printf "${_log_color}"
}

if [ -z "${NOCOLOR}" ]; then
    export COLOR_RESET='\033[0m' \
           COLOR_BLACK='\033[0;30m' \
           COLOR_GRAY='\033[1;30m' \
           COLOR_RED='\033[0;31m' \
           COLOR_RED_BOLD='\033[1;31m' \
           COLOR_GREEN='\033[0;32m' \
           COLOR_GREEN_BOLD='\033[1;32m' \
           COLOR_YELLOW='\033[0;33m' \
           COLOR_YELLOW_BOLD='\033[1;33m' \
           COLOR_BLUE='\033[0;34m' \
           COLOR_BLUE_BOLD='\033[1;34m' \
           COLOR_PURPLE='\033[0;35m' \
           COLOR_PURPLE_BOLD='\033[1;35m' \
           COLOR_CYAN='\033[0;36m' \
           COLOR_CYAN_BOLD='\033[1;36m' \
           COLOR_LIGHT_GRAY='\033[0;37m' \
           COLOR_WHITE='\033[1;37m'
fi

# Set a default color for script's output
_log_color=${COLOR_CYAN}
printf "${_log_color}"

################################################################################
# Installation Environment Helpers
################################################################################
uno_detect_os()
{
    local uno_platform=
    if [ -x "$(which lsb_release)" ]; then
        uno_platform=$(lsb_release -si 2>/dev/null)
    elif [ -d /etc/os-release ]; then
        uno_platform=$(. /etc/os-release 1>/dev/null 2>&1;
            printf "%s" "${NAME}" | awk '{ print $1 }')
    else
        printf ""
        return
    fi

    case "${uno_platform}" in
        Ubuntu|Raspbian|Debian)
            printf "%s" "${uno_platform}"
            ;;
        *)
            printf ""
            ;;
    esac
}

uno_chown()
{
    local user_perm="${UNO_USER}:${UNO_GROUP}"
    uno_info "setting permissions for ${1} to ${user_perm}"
    ${SUDO} chown ${user_perm} "${1}"
}

uno_mkdir()
{
    # Try to create directory as user, then fall back to root if needed
    [ -d "${1}" ] || uno_info "creating directory: ${1}"
    mkdir -p ${1} || local root_path=y
    [ -z "${root_path}" ] || (
        uno_warning "root path: ${1}"
        ${SUDO} mkdir -p "${1}"
        # TODO chown the whole ${1} hierarchy, not just the leaf directory
        uno_chown "${1}"
    )
}

uno_python_check()
{
    # Check if a python module is already installed
    python3 -c "import ${1}; print(${1}.__name__)" 1>/dev/null || return 0
    sudo python3 -c "import ${1}; print(${1}.__name__)" 1>/dev/null || return 0
}

################################################################################
# Git helpers
################################################################################
uno_git_clone()
{
    local what="${1}" \
          tgt_dir="${2}" \
          tgt_url="${3}" \
          tgt_branch="${4}"

    uno_info "Cloning ${what} (${tgt_branch}) from ${tgt_url} to ${tgt_dir}"

    if [ -d "${tgt_dir}" ]; then
        uno_warning "Directory already exists: ${tgt_dir}"

        uno_yesno "Cloning ${tgt_url}" \
"Directory ${tgt_dir} already exists.

Would you like to delete it, and replace it with the latest version of branch ${tgt_branch} from ${tgt_url}?" \
--defaultno
        if uno_wprc_yes; then
            uno_warning "Deleting existing clone: ${tgt_dir}"
            ${SUDO} rm -rf ${tgt_dir}
        else
            uno_yesno "Update repository ${tgt_dir}" \
    "Would you like to update the repository in ${tgt_dir} by pulling the latest version of branch ${tgt_branch}?" \
    --defaultno
            if uno_wprc_yes; then
                uno_git_update "${what}" "${tgt_dir}" ${tgt_branch}
            else
                uno_warning "Directory non updated: ${tgt_dir}"
            fi
            return
        fi
    fi

    uno_mkdir ${tgt_dir}
    (
        cd ${tgt_dir}/..
        ${GIT} clone -b ${tgt_branch} --depth 1 --recurse-submodules ${tgt_url} $(basename ${tgt_dir})
        cd ${tgt_dir}
    )
}

uno_git_update()
{
    local what="${1}" \
          tgt_dir="${2}" \
          tgt_branch="${3}"
    
    [ -d "${tgt_dir}" ] || uno_error "${what} not found: ${tgt_dir}"

    uno_info "Updating ${what} (${tgt_branch}) in ${tgt_dir}"

    (
        cd ${tgt_dir}
        ${GIT} pull origin ${tgt_branch}
        ${GIT} checkout ${tgt_branch}
    )
}

################################################################################
# User Dialog helpers
################################################################################
# Configure screen for whiptail
# Find the rows and columns. Will default to 80x24 if it can not be detected.
screen_size=$(stty size 2>/dev/null || echo 24 80)
rows=$(echo ${screen_size} | awk '{print $1}')
columns=$(echo ${screen_size} | awk '{print $2}')
# Divide by two so the dialogs take up half of the screen, which looks nice.
r=$(( rows / 2 ))
c=$(( columns / 2 ))
# Unless the screen is tiny
r=$(( r < 20 ? 20 : r ))
c=$(( c < 70 ? 70 : c ))


# Global variable used to store the last retcode from whiptail
WPRC=0

# Constants used to check whiptail retcodes
WPRC_YES=0
WPRC_NO=1
WPRC_EXIT=255

uno_wprc_yes()
{
    [ ${WPRC} -eq ${WPRC_YES} ]
}

uno_wprc_no()
{
    [ ${WPRC} -eq ${WPRC_NO} ]
}

uno_wprc_exit()
{
    [ ${WPRC} -eq ${WPRC_EXIT} ]
}

uno_wprc_check()
{
    if uno_wprc_exit; then
        uno_error "Installer interrupted"
    fi
}

uno_yesno()
{
    local title="${1}" \
          text="${2}" \
          extra_args="${3}"

    WPRC=0
    whiptail --title "${title}" \
          --yesno \
          ${extra_args} \
          "${text}" \
          ${r} ${c} || WPRC=$?
    uno_wprc_check
}

uno_inputbox()
{
    local title="${1}" \
          prompt="${2}" \
          default="${3}"
    
    WPRC=0
    whiptail --title "${title}" \
          --inputbox \
          "${prompt}" \
          ${r} ${c} \
          ${default} 3>&1 1>&2 2>&3 || WPRC=$?
    uno_wprc_check
}

uno_msgbox()
{
    local title="${1}" \
          text="${2}"
    
    WPRC=0
    whiptail --title "${title}" \
          --msgbox \
          "${text}" \
          ${r} ${c} || WPRC=$?
    uno_wprc_check
}

uno_select()
{
    local what="${1}" \
          prompt="${2}" \
          default="${3}"
    local result=${default} \
          max_tries=100 \
          i=0

    while [ ${i} -lt ${max_tries} ]; do
        uno_yesno "Select ${what}" \
"${prompt}: ${result}

Continue with this value?" 3>&1 1>&2 2>&3
        if uno_wprc_yes; then
            break
        fi
        result=$(uno_inputbox "Specify ${what}" \
                              "${what}:" \
                              "${default}") 
        i=$(expr ${i} + 1)
    done
    if [ ${i} -ge ${max_tries} ]; then
        uno_error "Failed to select: ${what}"
    fi
    printf "%s" "${result}"
}


################################################################################
# apt helpers
################################################################################
uno_apt_sources_add_debian_unstable()
{
    local sources_tgt=/etc/apt/sources.list.d/debian-unstable.list \
          prefs_tgt=/etc/apt/preferences.d/limit-debian-unstable

    uno_info "Adding Debian's unstable apt repository to ${sources_tgt}"
    # Trust debian's apt repository
    ${SUDO} apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 \
                        --recv-keys 04EE7237B7D453EC 648ACFD622F3D138
    # Add debian's apt repository
    if [ ! -f ${sources_tgt}; then
        ${SUDO} sh -c "echo 'deb http://deb.debian.org/debian/ unstable main' > ${sources_tgt}"
    fi
    if [ ! -f ${prefs_tgt} ]; then
        ${SUDO} sh -c "printf 'Package: *\nPin: release a=unstable\nPin-Priority: 90\n' > ${prefs_tgt}"
    fi
    uno_info "Updating apt database..."
    ${APT_GET} update
}

################################################################################
# WireGuard helpers
################################################################################
uno_wireguard_build()
{
    local wg_dir=$(uno_select "WireGuard source directory" \
                              "WireGuard will be cloned in directory" \
                              ${WG_DIR})
    
    uno_info "Installing WireGuard's build dependencies..."
    ${APT_GET} install -y -qq ${WG_DEPS}
    
    uno_info "Cloning WireGuard to ${wg_dir}..."
    uno_mkdir ${wg_dir}
    uno_git_clone "wireguard kernel module" 
                  "${wg_dir}/wireguard-linux-compat" ${WG_URL} ${WG_BRANCH}
    uno_git_clone "wireguard tools" \
                  "${wg_dir}/wireguard-tools" ${WG_URL_TOOLS} ${WG_BRANCH}
    
    uno_info "Building WireGuard kernel module..."
    make -C "${wg_dir}/wireguard-linux-compat/src" -j$(nproc)
    ${SUDO} make -C "${wg_dir}/wireguard-linux-compat/src" install

    uno_info "Building wg tool..."
    make -C "${wg_dir}/wireguard-tools/src" -j$(nproc)
    ${SUDO} make -C "${wg_dir}/wireguard-tools/src" install
}

uno_wireguard_install()
{
    uno_msgbox "Installing WireGuard" \
"UNO requires WireGuard to create VPN links.

We will try to install it from binary packages, or build it from source if that fails."

    local wireguard_pkg=
    
    uno_info "Installing WireGuard..."

    case ${UNO_PLATFORM} in
        Ubuntu|Debian)
            wireguard_pkg=wireguard
            ;;
        Raspbian)
            uno_apt_sources_add_debian_unstable
            wireguard_pkg="wireguard raspberrypi-kernel-headers"
            ;;
        *)
            ;;
    esac

    if [ -n "${wireguard_pkg}" ]; then
        uno_info "Installing WireGuard from binary packages"
        if ! ${APT_GET} install -y -qq ${wireguard_pkg}; then
            uno_warning "Failed to install WireGuard from binary packages."
            wireguard_pkg=
        fi
    fi 

    # Try to install wireguard from packages
    if [ -z "${wireguard_pkg}" ]; then
        uno_yesno "Build WireGuard from source?" \
"Failed to install WireGuard from binary packages.

Would you like to try building it from source?

The kernel headers are required to do this, and they will be automatically installed."
        if uno_wprc_no; then
            uno_error "WireGuard must be installed to run uno"
        fi
        uno_wireguard_build
    fi
}

uno_wireguard_check()
{
    # Try to load wireguard module (noop if already loaded)
    ${SUDO} modprobe wireguard &&
    # check that it's loaded
    [ -n "$(lsmod | grep wireguard)" ] &&
    # Check that wireguard-tools are also installed
    [ -x "$(which wg)" ]
}


################################################################################
# Docker helpers
################################################################################

uno_docker_install()
{
    local docker_arch=
    case "${UNO_PLATFORM}" in
        Ubuntu)
            docker_arch="amd64"
            docker_os="ubuntu"
            ;;
        Debian)
            docker_arch="amd64"
            docker_os="debian"
            ;;
        *)
            return 1
            ;;
    esac
    uno_info "Installing Docker..."
    ${APT_GET} remove -y docker docker-engine docker.io containerd runc
    ${APT_GET} update
    ${APT_GET} install -y -qq apt-transport-https \
                            ca-certificates \
                            curl \
                            gnupg-agent \
                            software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | ${SUDO} apt-key add -
    ${SUDO} add-apt-repository \
        "deb [arch=${docker_arch}] https://download.docker.com/linux/${docker_os} \
        $(lsb_release -cs) \
        stable"
    ${APT_GET} update
    ${APT_GET} install -y -qq docker-ce docker-ce-cli containerd.io
}

uno_docker_install_sh()
{
    uno_info "Install Docker with convenience script..."
    curl -sSL https://get.docker.com | sh
}

uno_docker_check()
{
    [  -x "$(which docker)" ] && ${SUDO} docker ps -a 2>/dev/null 1>&2
}

################################################################################
# Detect RTI Connext DDS
################################################################################
uno_connext_arch()
{
    case "${UNO_PLATFORM}" in
        Ubuntu|Debian)
            printf "x64Linux4gcc7.3.0"
            ;;
        Raspbian)
            printf "armv7Linuxgcc7.3.0"
            ;;
    esac
}

uno_connext_host()
{
    case "${UNO_PLATFORM}" in
        Ubuntu|Debian)
            printf "rti_connext_dds-6.0.1-pro-host-x64Linux.run"
            ;;
        Raspbian)
            printf "rti_connext_dds-6.0.1-pro-armv8Linux4gcc7.3.0.tar.gz"
            ;;
    esac
}

uno_connext_target()
{
    printf "rti_connext_dds-6.0.1-pro-target-$(uno_connext_arch).rtipkg"
}

uno_connext_install_host()
{
    local host_file="${1}"

    if [ ! -f "${host_file}" ]; then
        uno_error "Required host bundle not found: ${host_file}"
    fi

    uno_mkdir ${NDDSHOME}
    local base_dir=$(dirname ${NDDSHOME})
    local install_dir="${base_dir}/rti_connext_dds-6.0.1"
    host_file=$(realpath ${host_file})
    
    uno_chown "${base_dir}"

    uno_info "Installing RTI Connext DDS host bundle ${host_file} in ${NDDSHOME}"

    if [ ! -d "${install_dir}" ]; then
        case "${host_file}" in
        *.run)
            (
                cd $(dirname ${host_file})
                ./$(basename ${host_file}) --mode unattended --prefix ${base_dir} ||
                    uno_error "Connext host installer failed with rc: $?"
            )
            ;;
        *.tar.gz)
            (
                cd ${base_dir}
                tar xzf ${host_file}
            )
            ;;
        esac
    fi

    if [ "${install_dir}" != "${NDDSHOME}" ]; then
        ${SUDO} ln -s ${install_dir} ${NDDSHOME}
        uno_chown "${NDDSHOME}"
    fi
}

uno_connext_install_target()
{
    local tgt_file="${1}"

    if [ ! -f "${tgt_file}" ]; then
        uno_error "Required target bundle not found: ${tgt_file}"
    fi

    if [ ! -d "${NDDSHOME}" ]; then
        uno_error "NDDSHOME not found: ${NDDSHOME}"
    fi

    uno_info "Installing RTI Connext DDS target bundle ${tgt_file} in ${NDDSHOME}"

    # check if we have rtipkginstall
    local rtipkginstall="${NDDSHOME}/bin/rtipkginstall"

    if [ -x "${rtipkginstall}" ]; then
        ${rtipkginstall} -u ${tgt_file}
    else
        local tmp_dir=/tmp/rtipkginstall-${RANDOM}
        tgt_file=$(realpath ${tgt_file})
        mkdir ${tmp_dir}
        cd ${tmp_dir}
        unzip ${tgt_file}
        unzip $(basename ${tgt-file} | sed 's/\.rtipkg/.zip/')
        rsync -ra rti_connext_dds-6.0.1/ ${NDDSHOME}/
    fi
}

uno_connext_install()
{
    local install_host= \
          install_tgt=
    
    if [ ! -d "${NDDSHOME}" ]; then
        install_host=$(uno_connext_host)
    fi

    if [ ! -d "${NDDSHOME}/lib/$(uno_connext_arch)" ]; then
        install_tgt=$(uno_connext_target)
    fi

    local nddshome=$(uno_select "RTI Connext DDS Installation Directory" \
        "RTI Connext DDS [$(uno_connext_arch)] will be installed in" \
        "${NDDSHOME:-${NDDSHOME_DEFAULT}}")
    
    export NDDSHOME="${nddshome}"

    if [ -n "${install_host}" ]; then
        uno_connext_install_host "${install_host}"
    fi

    if [ -n "${install_tgt}" ]; then
        uno_connext_install_target "${install_tgt}"
    fi

    if [ ! -d "${NDDSHOME}" -o ! -d "${NDDSHOME}/lib/$(uno_connext_arch)" ]; then
        uno_error "failed to install RTI Connext DDS"
    fi
}

uno_connext_check()
{
    if [ ! -d "${NDDSHOME}" -o ! -d "${NDDSHOME}/lib/$(uno_connext_arch)" ]; then
        (uno_connext_install) || (
            uno_msgbox "RTI Connext DDS not found" \
"uno requires RTI Connext DDS to be installed and configured via the NDDSHOME variable.

If you have installer files, place them in the current directory, then restart the script to install them automatically.
You must provide:

- $(uno_connext_host)
- $(uno_connext_target)

You can visit https://www.rti.com/free-trial for a free copy."
            uno_error "RTI Connext DDS not found."
        )
    else
        uno_info "RTI Connext DDS found: ${NDDSHOME}"
    fi
}

################################################################################
# Clone connextdds-py
################################################################################
uno_connextddspy_wheel_name()
{
    local pyv=$(python3 --version | awk '{print $2;}' | cut -d. -f1,2 | tr -d .) \
          pya=

    case "${UNO_PLATFORM}" in
    Ubuntu|Debian)
        pya=x86_64
        ;;
    Raspbian)
        pya=armv7l
        ;;
    esac

    printf "rti-0.0.1-cp${pyv}-cp${pyv}m-linux_${pya}.whl"
}

uno_connextddspy_wheel_find()
{
    local tgt_dir="${1}"
    local _whl=$(uno_connextddspy_wheel_name)
    
    if [ -f "${_whl}" ]; then
        printf "${_whl}"
        return
    fi

    _whl="${tgt_dir}/${_whl}"
    if [ -f "${_whl}" ]; then
        printf "${_whl}"
        return
    fi
}

uno_connextddspy_install()
{
    local tgt_dir="$(uno_select "connextdds-py source directory" \
        "connextdds-py will be cloned in directory" \
        "${DDSPY_DIR}")"
    DDSPY_DIR="${tgt_dir}"
    local whl=$(uno_connextddspy_wheel_find ${tgt_dir}) \
          use_whl=

    if [ -f "${whl}" ]; then
       uno_yesno "Install connextdds-py from wheel" \
"Pre-built wheel for connextdds-py found: ${whl}

Would you like to install it?"
        uno_wprc_no || use_whl=y
    fi

    if [ -n "${use_whl}" ]; then
        uno_connextddspy_wheel_install "${whl}"
    else
        uno_connextddspy_wheel_generate "${tgt_dir}"
    fi

}

uno_connextddspy_wheel_generate()
{
    local tgt_dir="${1}"

    uno_info "Building connextdds-py from source..."

    case "${UNO_PLATFORM}" in
        Raspbian)
            uno_yesno "Building connextdds-py on Raspberry Pi" \
"connextdds-py requires large amounts of memory to build, and compilation will likely fail on Raspberry Pi 3 or earlier.

Would you like to try building connextdds-py from source anyway?"
            if uno_wprc_no; then
                uno_error "Please install connextdds-py manually for users ${UNO_USER} and root, then run this script again."
                exit 1
            fi
            ;;
        *)
            ;;
    esac
    
    uno_connext_check

    uno_info "Installing Python dependencies for connextdds-py: ${DDSPY_DEPS_PIP}"
    pip3 install -q -U ${DDSPY_DEPS_PIP}
    uno_info "Installing system dependencies for connextdds-py: ${DDSPY_DEPS}"
    ${APT_GET} install -y -qq ${DDSPY_DEPS}
    
    uno_git_clone "connextdds-py"\
                  "${tgt_dir}" \
                  https://github.com/rticommunity/connextdds-py master


    local b_whl=${tgt_dir}/$(uno_connextddspy_wheel_name)

    if [ ! -f "${b_whl}" ]; then
        uno_warning "Overwriting existing connextdds-py wheel: ${b_whl}"
    fi

    (
        cd ${tgt_dir}
        connext_arch=$(uno_connext_arch)
        uno_info "Configuring connextdds-py for ${connext_arch}..."
        python3 configure.py -j$(nproc) ${connext_arch}
        uno_info "Generating connextdds-py wheel (this might take a while): ${whl_base}"
        CONNEXTDDS_ARCH=${connext_arch} pip3 wheel .
    )
    
    local whl=$(uno_connextddspy_wheel_find ${tgt_dir})

    if [ -z "${whl}" -o "${whl}" != "${b_whl}" ]; then
        uno_error "failed to load connextdds-py wheel: ${b_whl}"
    fi

    uno_connextddspy_wheel_install "${whl}"
}

uno_connextddspy_wheel_install()
{
    local whl="${1}"
    local whl_base=$(basename ${whl})

    # Install connextdds-py for user and root to using the generated wheel
    uno_info "Installing connextdds-py for ${UNO_USER} from: ${whl}"
    pip3 install ${whl}

    uno_info "Installing connextdds-py for root from: ${whl}"
    sudo pip3 install ${whl}

    uno_info "Caching ${whl_base} in ${UNO_WHL_DIR}"
    cp ${whl} ${UNO_WHL_DIR}
}


################################################################################
# Global configuration variables
################################################################################
UNO_PLATFORM=${UNO_PLATFORM:-$(uno_detect_os)}
UNO_USER=${UNO_USER:-$(whoami)}
UNO_GROUP=${UNO_GROUP:-${UNO_USER}}
UNO_HOST=${UNO_HOST:-$(hostname)}
UNO_BRANCH=${UNO_BRANCH:-master}
UNO_URL=${UNO_URL:-https://github.com/mentalsmash/uno}
UNO_WEB=https://uno.mentalsmash.org
UNO_DIR="${UNO_DIR:-/opt/uno}"
UNO_DEPS_SYS="iproute2
              python3-pip
              gnupg2
              dnsmasq
              quagga
              iputils-ping
              inetutils-traceroute
              dnsutils
              tmux
              rsync"
UNO_DEPS_RPI="libatlas-base-dev
              libopenjp2-7
              libtiff5"

################################################################################
# Internal global variables
################################################################################
SUDO=$([ "$(id -u)" = 0 ] || printf sudo)
APT_GET="${SUDO} apt-get"
GIT=$(which git)
WG_DIR=/opt/wg
WG_DEPS="libelf-dev
         linux-headers-$(uname -r)
         build-essential
         pkg-config" \
WG_URL=https://git.zx2c4.com/wireguard-linux-compat \
WG_URL_TOOLS=https://git.zx2c4.com/wireguard-tools \
WG_BRANCH=master
DDSPY_DIR=/opt/rti/connextdds-py
DDSPY_DEPS_PIP="wheel
                setuptools
                cmake
                patchelf-wrapper"
DDSPY_DEPS=build-essential
UNO_WHL_DIR="${UNO_DIR}/libuno/data/dds"
NDDSHOME_DEFAULT=/opt/rti/ndds
################################################################################
################################################################################
# BEGIN ACTUAL SCRIPT
################################################################################
################################################################################

################################################################################
# Detect system and greet user
################################################################################}
[ -n "${UNO_PLATFORM}" ] ||
    uno_error "Failed to detect host OS, or OS not supported by this script."
[ -z "${SUDO}" ] ||
    _root_warning="This script requires root privileges. User ${UNO_USER} must be able to use sudo"
    uno_warning "${_root_warning}"
    _root_warning="\n${_root_warning}\n"
    

uno_yesno "Install uno for ${UNO_PLATFORM}" \
"This script will install uno for user ${UNO_USER} on host ${UNO_HOST} using branch ${UNO_BRANCH} of repository ${UNO_URL}.
${_root_warning}
Would you like to continue with the installation?

(Press ESC at any time to exit)"

uno_wprc_yes || uno_error "Installation cancelled"

################################################################################
# Select root installation directory for uno
################################################################################
UNO_DIR=$(uno_select "uno installation directory" \
           "uno will be installed in the following directory" \
           "${UNO_DIR}")

uno_info "uno installation directory: ${UNO_DIR}"

################################################################################
# Update apt
################################################################################
# Set apt interface to non-interactive
export DEBIAN_FRONTEND=noninteractive

uno_info "updating apt database"
${APT_GET} update

################################################################################
# Install Git
################################################################################
if [ ! -x "${GIT}" ]; then
    uno_info "git not found in PATH, installing it"
    ${APT_GET} install -y -qq git
    GIT=$(which git)
else
    uno_info "git found: ${GIT}"
fi

################################################################################
# Initialize uno directory by cloning git repository
################################################################################
uno_git_clone "uno" "${UNO_DIR}" "${UNO_URL}" "${UNO_BRANCH}"

################################################################################
# System Dependencies
################################################################################

_uno_deps="${UNO_DEPS_SYS}"
case "${UNO_PLATFORM}" in
    Raspbian)
        _uno_deps="${_uno_deps} ${UNO_DEPS_RPI}"
        ;;
    *)
        ;;
esac

uno_info "Installing uno's system dependencies: ${_uno_deps}"
${APT_GET} install -y -qq ${_uno_deps}

################################################################################
# WireGuard Installation
################################################################################
if ! uno_wireguard_check; then
    uno_wireguard_install

    if ! uno_wireguard_check; then
        uno_error "Failed to detect WireGuard after installation."
    fi
else
    uno_info "WireGuard already installed: $(wg --version)"
fi

################################################################################
# Install Docker
################################################################################

# Check if docker is installed (naive check for 'docker' in PATH)
if ! uno_docker_check; then
    uno_yesno "Run uno with Docker" \
"UNO's agent may be deployed inside Docker containers.

Would you like to install Docker on the current host?"
    if uno_wprc_yes; then
        case "${UNO_PLATFORM}" in
            Ubuntu|Debian)
                uno_docker_install
                ;;
            Raspbian)
                uno_docker_install_sh
                ;;
        esac
    else
        uno_warning "Docker not installed"
    fi
else
    uno_info "Docker already installed: $(${SUDO} docker --version)"
fi

# Check if user can run docker
if ! docker ps -a 2>/dev/null 1>&2; then
    if [ -n "$(groups | tr ' ' '\n' | grep ^docker)" ]; then
        uno_error "current user is part of the docker group but can't run docker. Please check your installation."
    fi

    uno_yesno "Configure Docker for user" \
"User '${UNO_USER}' is not configured to access the Docker daemon. All Docker operations will required the use of 'sudo'.

Would you like to add '${UNO_USER}' to group 'docker' to enable access to the Docker daemon?"
    if uno_wprc_yes; then
        ${SUDO} usermod -a -G docker ${UNO_USER}
        
        uno_warning "Log out and back in again to enable new user credentials for Docker."
    fi
else
    uno_info "Docker enabled for ${UNO_USER}"
fi

################################################################################
# Clone and build connextdds-py
################################################################################
_connextddspy_whl=$(uno_connextddspy_wheel_find ${DDSPY_DIR})
_uno_whl=${UNO_WHL_DIR}/$(uno_connextddspy_wheel_name)
_build_wheel=

if [ ! -f "${_uno_whl}" ]; then
    if [ -z "${_connextddspy_whl}" ]; then
        uno_yesno "Build connextdds-py wheel" \
"In order to build uno's agent container image, uno needs wheel $(uno_connextddspy_wheel_name) to be be available.

If you have it, place is in the current directory, and restart the script.
Alternatively, you can build it from source.

Would you like to generate $(uno_connextddspy_wheel_name) from source?"
        uno_wprc_no || _build_wheel=yes
    else
        uno_connextddspy_wheel_install "${_connextddspy_whl}"
    fi
fi

if ! uno_python_check rti.connextdds || [ -n "${_build_wheel}" ]; then
    uno_connextddspy_install
fi

if ! uno_python_check rti.connextdds; then
    uno_error "Failed to load connextdds-py"
else
    uno_info "installed: connextdds-py"
fi

################################################################################
# Install UNO with pip
################################################################################
uno_info "Installing uno for ${UNO_USER}"
# Install uno for current user
pip3 install -e ${UNO_DIR}

uno_info "Installing uno for root"
# Install uno for root
sudo pip3 install -e ${UNO_DIR}

if ! uno_python_check libuno; then
    uno_error "Failed to load libuno"
else
    uno_info "installed: uno"
fi

################################################################################
# Test uvn command
################################################################################
uno_info "Testing uvn command for ${UNO_USER}..."
uvn --version

uno_info "Testing uvn command for root..."
sudo uvn --version

################################################################################
# Install a trap to peform clean up tasks
################################################################################
_installer_cleanup()
{
    # Delete files generate by simple_validation.sh
    # Use UVN_ADDRESS in case user customized the value
    local test_uvn=$"{UVN_ADDRESS:-test-uvn.localhost}"
    rm -rf ${test_uvn} ${test_uvn}-cells
}

# Use bash's pseudo-signal EXIT to peform cleanup of generated files
trap _installer_cleanup EXIT

################################################################################
# Optionally run the included tests
################################################################################
_test_interrupted=
_test_rc=
_test_dir=
_test=
_test_path=
_test_desc=
_test_do_run=

uno_test_interrupted()
{
    _test_interrupted=y
}

uno_test_check()
{
    if [ -n "${_test_interrupted}" -o ${_test_rc} -eq 0 ]; then
        uno_info "test ${_test} succeeded!"
    elif [ ${_test_rc} -ne 0 ]; then
        uno_error "test ${_test} FAILED (${_test_rc})"
    fi
}

uno_test_run()
{

    [ -z "${_test_do_run}" ] || uno_yesno "Run test ${_test}" \
"${_test} ${_test_desc}

Directory ${_test_dir} will be created (and deleted if it already exists).

Run the test?

(${_test_exit})"

    if [ -z "${_test_do_run}" ] || uno_wprc_no; then
        uno_info "test skipped: ${_test}"
        return
    fi

    ${SUDO} rm -rf ${_test_dir}
    uno_mkdir ${_test_dir}
    trap uno_test_interrupted INT TERM
    cd ${_test_dir}
    # disable exit on error
    set +e
    ${_test_run}
    _test_rc=$?
    # re-enable exit on error
    set -e
    cd -
    uno_test_check ${_test_rc}
}

uno_yesno "Validate uno installation" \
"uno has been successfully installed on the system.

Would you like to run some demo scenarios to verify that it actually works?"

uno_wprc_no || _test_do_run=y

################################################################################
# simple_validation.sh
################################################################################

_test_dir=$(pwd)/uno-test-simple
_test=simple_validation.sh
_test_run=${UNO_DIR}/test/simple_validation.sh
_test_desc="performs a basic validation of the uno installation:

  - It creates a new UVN configuration.
  - It attaches 3 cells to the UVN.
  - It generates a new deployment.
  - It installs the generated deployment packages.
  - It starts the root agent."
_test_exit="You can exit the test at any time by pressing CTRL+C."

uno_test_run

################################################################################
# experiment_local.sh
################################################################################
EXPLOC_NETS=4
EXPLOC_DEPLOY=yes

_tmux_escape="CTRL+B"

_tmux_check_escape()
{
    local tmux_conf="${HOME}/.tmux.conf"
    local tmux_cfg="set -g prefix C-a"

    if [ ! -f "${tmux_conf}" ] || ! grep "${tmux_cfg}" ${tmux_conf}; then
        uno_yesno "Update tmux escape sequence" \
"It looks like you are using tmux's default escape sequence, CTRL+B.
This sequence must be typed to perform any command, and it's a bit awkward.

Taking inspiration from the \`screen\` utility, we think CTRL+A is a more natural mapping.

Would you like to install rule '${tmux_cfg}' in ${tmux_conf} to modify the escape sequence to CTRL+A?"

        if uno_wprc_yes; then
            printf "# make ctrl-a the default key to get to \"meta\" mode instead of ctrl-b
${tmux_cfg}
" >> ${tmux_conf}
            uno_warning "Enabled CTRL+A as tmux escape sequence"
            _tmux_escape="CTRL+A"
        fi
    fi
}

_experiment_local()
{
    case "${UNO_PLATFORM}" in
    Raspbian)
        local rpi_warning="\nSince you are running on a Raspberry Pi, you should keep this number low or risk running out of memory (e.g. 2-3 networks).\n"
    esac

    local exp_nets=$(uno_select "number of private networks" \
        "Select the number of private networks that the test will attach to the UVN.
${rpi_warning}
Current value" \
        ${EXPLOC_NETS})
    
    local exp_deploy=$(uno_select "generate deployment configuration" \
        "The test can optionally generate a deployment configuration before starting the nodes.
If you skip this step, the UVN will be launched without a backbone.
You can generate a deployment at any time by navigating to the root agent's container, and using alias \`uvnd_deploy\`.

Current value (leave empty to disable)" \
        ${EXPLOC_DEPLOY})
    
    _tmux_check_escape

    uno_msgbox "One more thing before we start..." \
"The test uses tmux to display terminals to each containers.

You can navigate between tmux panels using ${_tmux_escape} and the arrow keys.
To switch between windows press ${_tmux_escape} then P or N.

All panels display either one of the container's logs, or a control shell inside it."

    (
        cd ${_test_dir}
        NETS=${exp_nets} PREDEPLOY=${exp_deploy} VERBOSE=y \
            ${UNO_DIR}/test/local_deploy/experiment_local.sh
    )
}

_test_dir=$(pwd)/uno-test-local
_test=local_deploy
_test_run=_experiment_local
_test_desc="is a more advanced test which simulates a uvn locally using Docker containers.
The test creates an arbitrary number of private networks, each one containing 3 hosts (a gateway, a cell, and regular host).
All LANs are connected to a common \"internet\" which contains the UVN registry, and a \"roaming\" cell."
_test_exit="Use CTRL+C to interrupt the test while loading. Exit tmux by pressing ${_tmux_escape}, and typing ':kill-session'"

uno_test_run

################################################################################
# Done
################################################################################
uno_msgbox "UNO installed" \
"Congratulations, you have successfully installed UNO on ${UNO_HOST}.

Run \`uvn -h\` to get started with a list of available commands or visit ${UNO_WEB} to consult the documentation." \
            ${r} ${c}

uno_info "UNO successfully installed."
