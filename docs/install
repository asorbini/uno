#!/bin/sh
###############################################################################
# (C) Copyright 2020 Andrea Sorbini
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as 
# published by the Free Software Foundation, either version 3 of the 
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
###############################################################################
set -e

################################################################################
# Logging helpers
################################################################################
uno_error()
{
    echo ERROR: $@ >&2
    exit 1
}

uno_warning()
{
    echo WARNING: $@ >&2
}

uno_info()
{
    echo I: $@
}

################################################################################
# Installation Environment Helpers
################################################################################
uno_detect_os()
{
    local uno_platform=
    if [ -x "$(which lsb_release)" ]; then
        uno_platform=$(lsb_release -si)
    elif [ -d /etc/os-release ]; then
        uno_platform=$(
            (. /etc/os-release
             echo ${NAME} ) | awk '{ print $1 }' )
    else
        return
    fi

    case "${uno_platform}" in
        Ubuntu|Raspbian|Debian)
            echo "${uno_platform}"
            ;;
        *)
            ;;
    esac
}

################################################################################
# Git helpers
################################################################################
uno_git_clone()
{
    local what="${1}" \
          tgt_dir="${2}" \
          tgt_url="${3}" \
          tgt_branch="${4}"

    uno_info "Cloning ${what} (${tgt_branch}) from ${tgt_url} to ${tgt_dir}"

    if [ -d "${tgt_dir}" ]; then
        uno_warning "Directory already exists: ${tgt_dir}"

        if uno_yesno "Update repository ${tgt_dir}" \
"Would you like to update repository ${tgt_dir} to the latest version of branch ${tgt_branch} from ${tgt_url}?" \
                    ${r} ${c}; then
            uno_git_update "${what}" "${tgt_dir}" ${tgt_branch}
        else
            uno_warning "Directory non updated: ${tgt_dir}"
        fi
        return
    fi

    mkdir -p ${tgt_dir}
    ${SUDO} chown ${UNO_USER}:${UNO_USER_GROUP} "${UNO_DIR}"
    ${GIT} init
    ${GIT} remote add uno-setup ${tgt_url}
    ${GIT} pull --depth 1 uno-setup ${tgt_branch}
    ${GIT} checkout ${tgt_branch}
}

uno_git_update()
{
    local what="${1}" \
          tgt_dir="${2}" \
          tgt_branch="${3}"
    
    uno_info "Updating ${what} (${tgt_branch}) in ${tgt_dir}"

    cd ${tgt_dir}
    if [ -z "$(${GIT} remote 2>/dev/null | grep uno-setup)" ]; then
        uno_error "Repository not initialized by this script: ${tgt_dir}"
    fi
    ${GIT} pull --depth 1 uno-setup ${tgt_branch}
    ${GIT} checkout ${tgt_branch}
}

################################################################################
# User Dialog helpers
################################################################################
# Configure screen for whiptail
# Find the rows and columns. Will default to 80x24 if it can not be detected.
screen_size=$(stty size 2>/dev/null || echo 24 80)
rows=$(echo ${screen_size} | awk '{print $1}')
columns=$(echo ${screen_size} | awk '{print $2}')
# Divide by two so the dialogs take up half of the screen, which looks nice.
r=$(( rows / 2 ))
c=$(( columns / 2 ))
# Unless the screen is tiny
r=$(( r < 20 ? 20 : r ))
c=$(( c < 70 ? 70 : c ))

uno_yesno()
{
    local title="${1}" \
          text="${2}" \
          extra_args="${3}"

    whiptail --title "${title}" \
             --yesno \
             ${extra_args} \
             "${text}" \
             ${r} ${c} 1>/dev/null 2>&1
}

uno_inputbox()
{
    local title="${1}" \
          prompt="${2}" \
          default="${3}"
    
    whiptail --title "${title}" \
             --inputbox \
             "${prompt}" \
             ${r} ${c} ${default} 1>/dev/null
}

uno_msgbox()
{
    local title="${1}" \
          text="${2}"
    
    whiptail --title "${title}" \
             --msgbox \
             "${text}" \
             ${r} ${c} 1>/dev/null 2>&1
}

uno_select()
{
    local what="${1}" \
          prompt="${2}" \
          default="${3}"
    local result=${default} \
          max_tries=100 \
          i=0

    while [ ${i} -lt ${max_tries} ]; do
        if ! uno_yesno "Select ${what}" \
"${prompt}: ${result}

Continue with this value?"; then
            result=$(uno_inputbox "Specify ${what}" \
                                  "${what}:"
                                  "${default}")
        else
            break
        fi
        i=$(expr ${i} + ${max_tries})
    done
    if [ ${i} -ge ${max_tries} ]; then
        uno_error "Failed to select: ${what}"
    fi
    print "%s" "${result}"
}


################################################################################
# apt helpers
################################################################################
uno_apt_sources_add_debian_unstable()
{
    local sources_tgt=/etc/apt/sources.list.d/debian-unstable.list \
          prefs_tgt=/etc/apt/preferences.d/limit-debian-unstable

    uno_info "Adding Debian's unstable apt repository to ${sources_tgt}"
    # Trust debian's apt repository
    ${SUDO} apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 \
                        --recv-keys 04EE7237B7D453EC 648ACFD622F3D138
    # Add debian's apt repository
    if [ ! -f ${sources_tgt}; then
        ${SUDO} sh -c "echo 'deb http://deb.debian.org/debian/ unstable main' > ${sources_tgt}"
    fi
    if [ ! -f ${prefs_tgt} ]; then
        ${SUDO} sh -c "printf 'Package: *\nPin: release a=unstable\nPin-Priority: 90\n' > ${prefs_tgt}"
    fi
    uno_info "Updating apt database..."
    ${APT_GET} update
}

################################################################################
# WireGuard helpers
################################################################################
uno_wireguard_build()
{
    local wg_dir=$(uno_select "WireGuard source directory" \
                              "WireGuard will be cloned in directory" \
                              ${WG_DIR})
    
    uno_info "Installing WireGuard's build dependencies..."
    ${APT_GET} install -y -qq ${WG_DEPS}
    
    uno_info "Cloning WireGuard to ${wg_dir}..."
    ${SUDO} mkdir -p ${wg_dir}
    ${SUDO} chown ${UNO_USER}:${UNO_USER_GROUP} "${wg_dir}"
    uno_git_clone "${wg_dir}/wireguard-linux-compat" ${WG_URL} ${WG_BRANCH}
    uno_git_clone "${wg_dir}/wireguard-tools" ${WG_URL_TOOLS} ${WG_BRANCH}
    
    uno_info "Building WireGuard kernel module..."
    make -C "${wg_dir}/wireguard-linux-compat/src" -j$(nproc)
    ${SUDO} make -C "${wg_dir}/wireguard-linux-compat/src" install

    uno_info "Building wg tool..."
    make -C "${wg_dir}/wireguard-tools/src" -j$(nproc)
    ${SUDO} make -C "${wg_dir}/wireguard-tools/src" install
}

uno_wireguard_install()
{
    uno_msgbox "Installing WireGuard" \
"UNO requires WireGuard to create VPN links.

We will try to install it from binary packages, or build it from source if that fails."

    local wireguard_pkg=
    
    uno_info "Installing WireGuard..."

    case ${UNO_PLATFORM} in
        Ubuntu|Debian)
            wireguard_pkg=wireguard
            ;;
        Raspbian)
            uno_apt_sources_add_debian_unstable
            wireguard_pkg="wireguard raspberrypi-kernel-headers"
        *)
            ;;
    esac

    if [ -n "${wireguard_pkg}" ]; then
        uno_info "Installing WireGuard from binary packages"
        if ! ${APT_GET} install -y -qq ${wireguard_pkg}; then
            uno_warning "Failed to install WireGuard from binary packages."
            wireguard_pkg=
        fi
    fi 

    # Try to install wireguard from packages
    if [ -z "${wireguard_pkg}" ]; then
        if ! uno_yesno "Build WireGuard from source?" \
"Failed to install WireGuard from binary packages.

Would you like to try building it from source?

The kernel headers are required to do this, and they will be automatically installed."; then
            uno_error "WireGuard must be installed to run uno"
        fi
        uno_wireguard_build
    fi
}

uno_wireguard_check()
{
    # Try to load wireguard module (noop if already loaded)
    ${SUDO} modprobe wireguard &&
    # check that it's loaded
    [ -n "$(lsmod | grep wireguard)" ] &&
    # Check that wireguard-tools are also installed
    [ -x "$(which wg)" ]
}


################################################################################
# Docker helpers
################################################################################

uno_docker_install()
{
    local docker_arch=
    case "${UNO_PLATFORM}" in
        Ubuntu)
            docker_arch="amd64"
            docker_os="ubuntu"
            ;;
        Debian)
            docker_arch="amd64"
            docker_os="debian"
            ;;
        *)
            return 1
            ;;
    esac
    uno_info "Installing Docker..."
    ${APT_GET} remove -y docker docker-engine docker.io containerd runc
    ${APT_GET} update
    ${APT_GET} install -y -qq apt-transport-https \
                            ca-certificates \
                            curl \
                            gnupg-agent \
                            software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | ${SUDO} apt-key add -
    ${SUDO} add-apt-repository \
        "deb [arch=${docker_arch}] https://download.docker.com/linux/${docker_os} \
        $(lsb_release -cs) \
        stable"
    ${APT_GET} update
    ${APT_GET} install -y -qq docker-ce docker-ce-cli containerd.io
}

uno_docker_install_sh()
{
    uno_info "Install Docker with convenience script..."
    curl -sSL https://get.docker.com | sh
}

uno_docker_check()
{
    [  -x "$(which docker)" ] && ${SUDO} docker ps -a 2>/dev/null 1>&2
}

################################################################################
# Detect RTI Connext DDS
################################################################################
uno_connext_arch()
{
    case "${UNO_PLATFORM}" in
        Ubuntu|Debian)
            printf "x64Linux4gcc7.3.0"
            ;;
        Raspbian)
            printf "armv7Linuxgcc7.3.0"
            ;;
    esac
}
uno_connext_check()
{
    if [ ! -d "${NDDSHOME}" -o ! -d "${NDDSHOME}/lib/$(uno_connext_arch)" ]; then
        uno_msgbox "RTI Connext DDS not found" \
"UNO requires RTI Connext DDS to be installed and configured via the NDDSHOME variable.

It doesn't look like NDDSHOME ('${NDDSHOME}') is properly configured, or you might have not yet installed RTI Connext DDS.

Please visit https://www.rti.com/free-trial to retrieve a free copy.

 Make sure to include libraries for target $(uno_connext_arch) in your installation." \
                ${r} ${c}
        uno_error "RTI Connext DDS not found."
    else
        uno_info "RTI Connext DDS found: ${NDDSHOME}"
    fi
}

################################################################################
# Clone connextdds-py
################################################################################
uno_connextddspy_check()
{
    # Check if connextdds-py is already installed
    python3 -c "import rti.connextdds" &&
    sudo python3 -c "import rti.connextdds"
}

uno_connextddspy_wheel()
{
    local _whl=$(
        case "${UNO_PLATFORM}" in
        Ubuntu|Debian)
            printf "rti-0.0.1-cp36-cp36m-linux_x86_64.whl"
            ;;
        Raspbian)
            printf "rti-0.0.1-cp37-cp37m-linux_armv7l.whl"
            ;;
        esac
    )
    
    if [ -f "${_whl}" ]; then
        printf "${_whl}"
        return
    fi

    _whl="${DDSPY_DIR}/${_whl}"
    if [ -f "${_whl}" ]; then
        printf "${_whl}"
        return
    fi
}

uno_connextddspy_build()
{
    local tgt_dir="${1}"

    case "${UNO_PLATFORM}" in
        Raspbian)
            if ! uno_yesno "Building connextdds-py on Raspberry Pi" \
"connextdds-py requires large amounts of memory to build, and compilation will likely fail on Raspberry Pi 3 or earlier.

Would you still like to try building connextdds-py from source?" \
                     ${r} ${c}; then
                uno_error "Please install connextdds-py manually then try again."
                exit 1
            fi
            ;;
        *)
            ;;
    esac

    uno_check_connext

    uno_info "Installing dependencies for connextdds-py"
    pip3 install -q -U wheel \
               setuptools \
               cmake \
               patchelf-wrapper
    ${APT_GET} install -y -qq build-essential
    
    uno_info "Cloning connextdds-py..."
    uno_git_clone "${tgt_dir}" https://github.com/rticommunity/connextdds-py master
    (
        cd ${tgt_dir}
        uno_info "Configuring connextdds-py for $(uno_connext_arch)..."
        python3 configure.py $(uno_connext_arch)
        uno_info "Installing connextdds-py (this might take a while)..."
        CONNEXTDDS_ARCH=$(uno_connext_arch) pip3 install .
    )
    local whl=$(uno_connextddspy_wheel) \
          uno_dir="${UNO_DIR}/libuno/data/dds"
    
    # Install connextdds-py for root to using the generated wheel
    sudo pip3 install ${whl}

    uno_info "Caching $(basename ${whl}) in ${uno_dir}"
    cp ${whl} ${uno_dir}
}


################################################################################
# Global configuration variables
################################################################################
UNO_PLATFORM=${UNO_PLATFORM:-$(uno_detect_os)}
UNO_USER=${UNO_USER:-$(whoami)}
UNO_HOST=${UNO_HOST:-$(hostname)}
UNO_BRANCH=${UNO_BRANCH:-master}
UNO_URL=${UNO_URL:-https://github.com/mentalsmash/uno}
UNO_DIR="${UNO_DIR:-/opt/uvn}"
UNO_DEPS_SYS="iproute2
              python3-pip
              gnupg2
              dnsmasq
              quagga
              iputils-ping
              inetutils-traceroute
              dnsutils
              tmux"
UNO_DEPS_RPI="libatlas-base-dev
              libopenjp2-7
              libtiff5"

################################################################################
# Internal global variables
################################################################################
SUDO=$([ "$(id -u)" = 0 ] || printf sudo)
APT_GET="${SUDO} apt-get"
GIT=$(which git)
WG_DEPS="libelf-dev
         linux-headers-$(uname -r)
         build-essential
         pkg-config" \
WG_URL=https://git.zx2c4.com/wireguard-linux-compat \
WG_URL_TOOLS=https://git.zx2c4.com/wireguard-tools \
WG_BRANCH=master

################################################################################
################################################################################
# BEGIN ACTUAL SCRIPT
################################################################################
################################################################################

################################################################################
# Detect system and greet user
################################################################################}
[ -n "${UNO_PLATFORM}" ] ||
    uno_error "Failed to detect host OS, or OS not supported by this script."
[ -z "${SUDO}" ] ||
    uno_warning "This script requires root privileges. User ${UNO_USER} must be able to use sudo"

uno_yesno "Welcome to uno" \
"This script will install uno for ${UNO_PLATFORM} on ${UNO_HOST} using branch ${UNO_BRANCH} of ${UNO_URL}.

Would you like to continue with the installation?" ||
    uno_error "Installation cancelled"

################################################################################
# Select root installation directory for uno
################################################################################
UNO_DIR=$(uno_select "uno installation directory" \
           "uno will be installed in the following directory" \
           "${UNO_DIR}")

################################################################################
# Install Git
################################################################################
if [ ! -x "${GIT}" ]; then
    uno_info "git not found in PATH, installing it"
    ${APT_GET} install -y -qq git
    GIT=$(which git)
fi

################################################################################
# Check if UNO is already installed
################################################################################
if [ -d "${UNO_DIR}" ] &&
    uno_yesno "Detected existing uno installation" \
"UNO seems to be already installed under ${UNO_DIR}.

Would you like to delete it and re-install it?" \
        --defaultno; then
    uno_info "Deleting existing uno instalation: ${UNO_DIR}"
    ${SUDO} rm -rf "${UNO_DIR}"
fi

################################################################################
# Initialize uno directory by cloning git repository
################################################################################
uno_git_clone "${UNO_DIR}" "${UNO_URL}" "${UNO_BRANCH}"

################################################################################
# System Dependencies
################################################################################
uno_info "Installing uno's system dependencies"

_uno_deps="${UNO_DEPS_SYS}"
case "${UNO_PLATFORM}" in
    Raspbian)
        _uno_deps="${_uno_deps} ${UNO_DEPS_RPI}"
        ;;
    *)
        ;;
esac

${APT_GET} install -y -qq ${_uno_deps}

################################################################################
# WireGuard Installation
################################################################################
if ! uno_wireguard_check; then
    uno_wireguard_install

    if ! uno_wireguard_check; then
        uno_error "Failed to detect WireGuard after installation."
    fi
else
    uno_info "WireGuard already installed: $(wg --version)"
fi

################################################################################
# Install Docker
################################################################################

# Check if docker is installed (naive check for 'docker' in PATH)
if ! uno_docker_check; then
    if uno_yesno "Run uno with Docker" \
"UNO's agent may be deployed inside a Docker container.

Would you like to install Docker on the current host?" \
                ${r} ${c}; then
        case "${UNO_PLATFORM}" in
            Ubuntu|Debian)
                uno_docker_install
                ;;
            Raspbian)
                uno_docker_install_sh
                ;;
        esac
    fi
else
    uno_info "Docker already installed: $(${SUDO} docker --version)"
fi

# Check if user can run docker
if ! docker ps -a 2>/dev/null 1>&2; then
    if [ -n "$(groups | tr ' ' '\n' | grep ^docker)" ]; then
        uno_error "current user is part of the docker group but can't run docker. Please check your installation."
    fi

    if uno_yesno "Configure Docker for user" \
"User '${UNO_USER}' is not configured to access the Docker daemon. All Docker operations will required the use of 'sudo'.

Would you like to add '${UNO_USER}' to group 'docker' to enable access to the Docker daemon?" \
                ${r} ${c}; then
        ${SUDO} usermod -a -G docker ${UNO_USER}
        
        uno_warning "Log out and back in again to enable new user credentials for Docker."
    fi
fi

################################################################################
# Clone and build connextdds-py
################################################################################
if ! uno_connextddspy_check; then
    DDSPY_DIR="${DDSPY_DIR:=/opt/rti/connextdds-py}"
    _connextddspy_whl=$(uno_connextddspy_wheel)
    if [ -f "${_connextddspy_whl}" ] &&
        uno_yesno "Install connextdds-py from pre-built wheel" \
"Pre-built wheel for connextdds-py found at: $(uno_connextddspy_wheel)

Would you like to install it?" \
                 ${r} ${c}; then
        uno_info "Instaling connextdds-py with ${_connextddspy_whl}"
        pip3 install ${_connextddspy_whl}
        sudo pip3 install ${_connextddspy_whl}
    else
        uno_info "connextdds-py not found. Building it from source..."
        uno_connextddspy_build "${DDSPY_DIR}"
    fi
fi

################################################################################
# Install UNO with pip
################################################################################
uno_info "Installing UNO..."
# Install uno for current user
pip3 install -e ${UNO_DIR}

# Install uno for root
sudo pip3 install -e ${UNO_DIR}


################################################################################
# Test uvn command
################################################################################
uno_info "Testing uvn command for ${UNO_USER}..."
uvn --version

uno_info "Testing uvn command for root..."
sudo uvn --version

################################################################################
# Install a trap to peform clean up tasks
################################################################################
_installer_cleanup()
{
    # Delete files generate by simple_validation.sh
    # Use UVN_ADDRESS in case user customized the value
    local test_uvn=$"{UVN_ADDRESS:-test-uvn.localhost}"
    rm -rf ${test_uvn} ${test_uvn}-cells
}

# Use bash's pseudo-signal EXIT to peform cleanup of generated files
trap _installer_cleanup EXIT

################################################################################
# Optionally run simple_validation.sh
################################################################################
_test_interrupted=
_test_check_exit()
{
    _test_interrupted=y
}

_test_dir=$(pwd)/uno-install-test

if uno_yesno "Validate UNO installation" \
"UNO has been successfully installed on the system.
            
Would you like to test the installation by generating a demo UVN configuration?

This might take a few minutes. Directory ${_test_dir} will be deleted if it already exists.

After generating a mock uvn configuration, the test will spawn the root registry agent to verify that you can actually run uno on the system.

Once the agent has started, you can resume this script by terminating the agent process with CTRL+C." \
            ${r} ${c}; then
    rm -rf ${_test_dir}
    mkdir ${_test_dir}
    cd ${_test_dir}
    trap _test_check_exit INT TERM
    # disable exit on error
    set +e
    ${UNO_DIR}/test/simple_validation.sh
    test_rc=$?
    if [ -n "${_test_interrupted}" ]; then
        uno_info "UNO validation succeeded!"
    elif [ "${test_rc}" -ne 0 ]; then
        uno_error "UNO validation FAILED (${test_rc})"
    else
        uno_error "uvn agent terminated before signal"
    fi
fi

################################################################################
# Done
################################################################################
uno_msgbox "UNO installed" \
"Congratulations, you have successfully installed UNO on ${UNO_HOST}.

Run \`uvn -h\` for a list of available commands." \
            ${r} ${c}

uno_info "UNO successfully installed."
