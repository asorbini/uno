#!/bin/sh
###############################################################################
# (C) Copyright 2020 Andrea Sorbini
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as 
# published by the Free Software Foundation, either version 3 of the 
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
###############################################################################
set -e
[ -z "${DEBUG}" ] || set -x

################################################################################
# Store logs in a file
################################################################################
uno_log()
{
    cat - | tee -a $(pwd)/uno-install.log
}

################################################################################
# Logging helpers
################################################################################
uno_error()
{
    printf "${COLOR_RED_BOLD}"
    echo ERROR: $@ | uno_log >&2
    printf "${COLOR_RESET}"
    printf "${_log_color}"
    exit 1
}

uno_warning()
{
    printf "${COLOR_YELLOW_BOLD}"
    echo WARNING: $@ | uno_log >&2
    printf "${COLOR_RESET}"
    printf "${_log_color}"
}

uno_info()
{
    printf "${COLOR_BLUE_BOLD}"
    echo I: $@ | uno_log
    printf "${COLOR_RESET}"
    printf "${_log_color}"
}

if [ -z "${NOCOLOR}" -a -z "${NONINTERACTIVE}" ]; then
    export COLOR_RESET='\033[0m' \
           COLOR_BLACK='\033[0;30m' \
           COLOR_GRAY='\033[1;30m' \
           COLOR_RED='\033[0;31m' \
           COLOR_RED_BOLD='\033[1;31m' \
           COLOR_GREEN='\033[0;32m' \
           COLOR_GREEN_BOLD='\033[1;32m' \
           COLOR_YELLOW='\033[0;33m' \
           COLOR_YELLOW_BOLD='\033[1;33m' \
           COLOR_BLUE='\033[0;34m' \
           COLOR_BLUE_BOLD='\033[1;34m' \
           COLOR_PURPLE='\033[0;35m' \
           COLOR_PURPLE_BOLD='\033[1;35m' \
           COLOR_CYAN='\033[0;36m' \
           COLOR_CYAN_BOLD='\033[1;36m' \
           COLOR_LIGHT_GRAY='\033[0;37m' \
           COLOR_WHITE='\033[1;37m'
fi

# Set a default color for script's output
_log_color=${COLOR_CYAN}
printf "${_log_color}"

################################################################################
# Installation Environment Helpers
################################################################################
uno_detect_os()
{
    local uno_platform=
    if [ -x "$(which lsb_release)" ]; then
        uno_platform=$(lsb_release -si 2>/dev/null)
    elif [ -d /etc/os-release ]; then
        uno_platform=$(. /etc/os-release 1>/dev/null 2>&1;
            printf "%s" "${NAME}" | awk '{ print $1 }')
    else
        printf ""
        return
    fi

    case "${uno_platform}" in
        Ubuntu|Raspbian|Debian)
            printf "%s" "${uno_platform}"
            ;;
        *)
            printf ""
            ;;
    esac
}

uno_chown()
{
    local user_perm="${UNO_USER}:${UNO_GROUP}"
    uno_info "setting permissions for ${1} to ${user_perm}"
    ${SUDO} chown ${user_perm} "${1}"
}

uno_mkdir()
{
    # Try to create directory as user, then fall back to root if needed
    [ -d "${1}" ] || uno_info "creating directory: ${1}"
    mkdir -p ${1} || local root_path=y
    [ -z "${root_path}" ] || (
        uno_warning "root path: ${1}"
        ${SUDO} mkdir -p "${1}"
        # TODO chown the whole ${1} hierarchy, not just the leaf directory
        uno_chown "${1}"
    )
}


################################################################################
# Git helpers
################################################################################
uno_git_clone()
{
    local what="${1}" \
          tgt_dir="${2}" \
          tgt_url="${3}" \
          tgt_branch="${4}"

    uno_info "Cloning ${what} (${tgt_branch}) from ${tgt_url} to ${tgt_dir}"

    if [ -d "${tgt_dir}" ]; then
        uno_warning "Directory already exists: ${tgt_dir}"

        uno_yesno "Cloning ${tgt_url}" \
"Directory ${tgt_dir} already exists.

Would you like to delete it, and replace it with the latest version of branch ${tgt_branch} from ${tgt_url}?" \
--defaultno
        if uno_wprc_yes; then
            uno_warning "Deleting existing clone: ${tgt_dir}"
            ${SUDO} rm -rf ${tgt_dir}
        else
            uno_yesno "Update repository ${tgt_dir}" \
    "Would you like to update the repository in ${tgt_dir} by pulling the latest version of branch ${tgt_branch}?" \
    --defaultno
            if uno_wprc_yes; then
                uno_git_update "${what}" "${tgt_dir}" ${tgt_branch}
            else
                uno_warning "Directory non updated: ${tgt_dir}"
            fi
            return
        fi
    fi

    uno_mkdir ${tgt_dir}
    (
        cd ${tgt_dir}/..
        ${GIT} clone -b ${tgt_branch} --depth 1 --recurse-submodules ${tgt_url} $(basename ${tgt_dir})
        cd ${tgt_dir}
    )
}

uno_git_update()
{
    local what="${1}" \
          tgt_dir="${2}" \
          tgt_branch="${3}"
    
    [ -d "${tgt_dir}" ] || uno_error "${what} not found: ${tgt_dir}"

    uno_info "Updating ${what} (${tgt_branch}) in ${tgt_dir}"

    (
        cd ${tgt_dir}
        ${GIT} pull origin ${tgt_branch}
        ${GIT} checkout ${tgt_branch}
    )
}

################################################################################
# User Dialog helpers
################################################################################
# Configure screen for whiptail
# Find the rows and columns. Will default to 80x24 if it can not be detected.
screen_size=$(stty size 2>/dev/null || echo 24 80)
rows=$(echo ${screen_size} | awk '{print $1}')
columns=$(echo ${screen_size} | awk '{print $2}')
# Divide by two so the dialogs take up half of the screen, which looks nice.
r=$(( rows / 2 ))
c=$(( columns / 2 ))
# Unless the screen is tiny
r=$(( r < 20 ? 20 : r ))
c=$(( c < 70 ? 70 : c ))


# Global variable used to store the last retcode from whiptail
WPRC=0

# Constants used to check whiptail retcodes
WPRC_YES=0
WPRC_NO=1
WPRC_EXIT=255

uno_wprc_yes()
{
    [ ${WPRC} -eq ${WPRC_YES} ]
}

uno_wprc_no()
{
    [ ${WPRC} -eq ${WPRC_NO} ]
}

uno_wprc_exit()
{
    [ ${WPRC} -eq ${WPRC_EXIT} ]
}

uno_wprc_check()
{
    if uno_wprc_exit; then
        uno_error "Installer interrupted"
    fi
}

uno_nonint()
{
    [ -n "${NONINTERACTIVE}" ]
}

uno_yesno()
{
    local title="${1}" \
          text="${2}" \
          extra_args="${3}"


    WPRC=0
    if uno_nonint; then
        return
    fi
    whiptail --title "${title}" \
          --yesno \
          ${extra_args} \
          "${text}" \
          ${r} ${c} || WPRC=$?
    uno_wprc_check
}

uno_inputbox()
{
    local title="${1}" \
          prompt="${2}" \
          default="${3}"
    
    WPRC=0
    if uno_nonint; then
        printf "${default}"
        return
    fi
    whiptail --title "${title}" \
          --inputbox \
          "${prompt}" \
          ${r} ${c} \
          ${default} 3>&1 1>&2 2>&3 || WPRC=$?
    uno_wprc_check
}

uno_msgbox()
{
    local title="${1}" \
          text="${2}"
    
    WPRC=0
    if uno_nonint; then
        return
    fi
    whiptail --title "${title}" \
          --msgbox \
          "${text}" \
          ${r} ${c} || WPRC=$?
    uno_wprc_check
}

uno_select()
{
    local what="${1}" \
          prompt="${2}" \
          default="${3}"
    local result=${default} \
          max_tries=100 \
          i=0

    if uno_nonint; then
        printf "${default}"
        return
    fi

    while [ ${i} -lt ${max_tries} ]; do
        uno_yesno "Select ${what}" \
"${prompt}: ${result}

Continue with this value?" 3>&1 1>&2 2>&3
        if uno_wprc_yes; then
            break
        fi
        result=$(uno_inputbox "Specify ${what}" \
                              "${what}:" \
                              "${default}") 
        i=$(expr ${i} + 1)
    done
    if [ ${i} -ge ${max_tries} ]; then
        uno_error "Failed to select: ${what}"
    fi
    printf "%s" "${result}"
}

################################################################################
################################################################################
# BEGIN ACTUAL SCRIPT
################################################################################
################################################################################
if [ -z "${_BOOTSTRAPPED}" ]; then
    uno_info "uno installer started: $(date)"

    uno_nonint || uno_info "running in non-interactive mode"

    ############################################################################
    # Global bootstrap variables
    ############################################################################
    export UNO_PLATFORM=${UNO_PLATFORM:-$(uno_detect_os)} \
           UNO_USER=${UNO_USER:-$(whoami)} \
           UNO_GROUP=${UNO_GROUP:-${UNO_USER}} \
           UNO_HOST=${UNO_HOST:-$(hostname)} \
           UNO_BRANCH=${UNO_BRANCH:-master} \
           UNO_URL=${UNO_URL:-https://github.com/mentalsmash/uno} \
           UNO_DIR="${UNO_DIR:-/opt/uno}" \
           UNO_WEB="${UNO_WEB:-https://uno.mentalsmash.org}"
    
    # Check if we are running as root, or we need sudo
    export SUDO=$([ "$(id -u)" = 0 ] || printf sudo)
    # Alias to run apt-get with appropriate permissions
    export APT_GET="${SUDO} apt-get"
    # Check that we have git available to clone the repository
    export GIT=$(which git || printf "")
    # Set apt interface to non-interactive
    export DEBIAN_FRONTEND=noninteractive

    root_warning=

    ############################################################################
    # Detect system and greet user
    ############################################################################
    if [ -z "${UNO_PLATFORM}" ]; then
        uno_error "Failed to detect host OS, or OS not supported by this script."
    fi

    if [ -n "${SUDO}" ]; then
        root_warning="The script requires root privileges.\nUser \`${UNO_USER}\` must be able to run \`sudo\`"
        uno_warning "${root_warning}"
        root_warning="${root_warning}\n"
    fi

    uno_yesno "Install uno for ${UNO_PLATFORM}" \
"This script will install uno on host \`${UNO_HOST}\`, and configure it to run as user \`${UNO_USER}\`.

uno will be installed from source, using branch \`${UNO_BRANCH}\` of \`${UNO_URL}\`.

${root_warning}
Would you like to continue with the installation?

(Press ESC at any time to exit)"

    uno_wprc_yes || uno_error "Installation cancelled"

    ############################################################################
    # Select root installation directory for uno
    ############################################################################
    UNO_DIR=$(uno_select "uno installation directory" \
            "uno will be installed in the following directory" \
            "${UNO_DIR}")

    uno_info "uno installation directory: ${UNO_DIR}"

    ############################################################################
    # Update apt
    ############################################################################
    uno_info "updating apt database"
    ${APT_GET} update || uno_warning "Failed to update apt database. Stale package definitions might be used."

    ############################################################################
    # Install Git
    ############################################################################
    if [ ! -x "${GIT}" ]; then
        uno_info "git not found in PATH, installing it"
        ${APT_GET} install -y -qq git
        GIT=$(which git)
    else
        uno_info "git found: ${GIT}"
    fi

    ############################################################################
    # Initialize uno directory by cloning its git repository
    ############################################################################
    uno_git_clone "uno" "${UNO_DIR}" "${UNO_URL}" "${UNO_BRANCH}"

    ############################################################################
    # Check that UNO_DIR is valid, and reload installer from local copy
    ############################################################################
    installer_local="${UNO_DIR}/docs/install"

    if [ ! -d "${UNO_DIR}" ]; then
        uno_error "invalid uno clone: ${UNO_DIR}"
    fi

    uno_info "reloading installer from: ${installer_local}"
    (_BOOTSTRAPPED=y ${installer_local})
    exit $?
fi

uno_info "loading installer from ${UNO_DIR}"
. ${UNO_DIR}/bin/installer/installer.sh
